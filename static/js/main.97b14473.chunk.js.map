{"version":3,"sources":["components/OverlayWithCutout.jsx","App.js","serviceWorker.js","index.js","components/OverlayWithCutout.module.css"],"names":["OverlayWithCutout","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCutoutPosition","targetRect","targetRef","getBoundingClientRect","portalRect","portal","top","left","width","height","padding","portalRoot","document","getElementById","createElement","style","position","appendChild","forceUpdate","removeChild","_this2","react_default","a","Fragment","children","setRef","ref","createPortal","className","styles","base","objectSpread","borderRadius","React","Component","defaultProps","App","state","byWidthAndHeight","toggle","setState","JSON","stringify","components_OverlayWithCutout","_ref","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"4RAKMA,cAQJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAiBRQ,kBAAoB,WAClB,IAAMC,EAAaR,EAAKS,UAAUC,wBAC5BC,EAAaX,EAAKY,OAAOF,wBAC3BG,EAAML,EAAWK,IAAMF,EAAWE,IAClCC,EAAON,EAAWM,KAAOH,EAAWG,KACpCC,EAAQf,EAAKD,MAAMgB,OAASP,EAAWO,MACvCC,EAAShB,EAAKD,MAAMiB,QAAUR,EAAWQ,OAa7C,OAZIhB,EAAKD,MAAMiB,SACbH,IAAQL,EAAWQ,OAAShB,EAAKD,MAAMiB,QAAU,GAE/ChB,EAAKD,MAAMgB,QACbD,IAASN,EAAWO,MAAQf,EAAKD,MAAMgB,OAAS,GAE9Cf,EAAKD,MAAMkB,UACbJ,GAAOb,EAAKD,MAAMkB,QAClBH,GAAQd,EAAKD,MAAMkB,QACnBF,GAAS,EAAIf,EAAKD,MAAMkB,QACxBD,GAAU,EAAIhB,EAAKD,MAAMkB,SAEpB,CAAEJ,MAAKC,OAAMC,QAAOC,WAnC3BhB,EAAKkB,WAAa,KAClBlB,EAAKY,OAAS,KACdZ,EAAKS,UAAY,KAJAT,mFAOjBG,KAAKe,WAAaC,SAASC,eAAe,eAC1CjB,KAAKS,OAASO,SAASE,cAAc,OACrClB,KAAKS,OAAOU,MAAMC,SAAW,WAC7BpB,KAAKe,WAAWM,YAAYrB,KAAKS,QACjCT,KAAKsB,6DAILtB,KAAKe,WAAWQ,YAAYvB,KAAKS,yCAyB1B,IAAAe,EAAAxB,KACP,OACEyB,EAAAC,EAAAR,cAAAO,EAAAC,EAAAC,SAAA,KACG3B,KAAKJ,MAAMgC,SAAS,CAAEC,OAAQ,SAAAC,GAAG,OAAKN,EAAKlB,UAAYwB,KACvD9B,KAAKS,QACJT,KAAKM,WACLyB,uBACEN,EAAAC,EAAAR,cAAA,OACEc,UAAWC,IAAOC,KAClBf,MAAKrB,OAAAqC,EAAA,EAAArC,CAAA,CACHsB,SAAU,YACPpB,KAAKI,oBAFL,CAGHgC,aAAcpC,KAAKJ,MAAMwC,iBAG7BpC,KAAKS,gBA/De4B,IAAMC,WAAhC3C,EACG4C,aAAe,CACpB3B,MAAO,KACPC,OAAQ,KACRC,QAAS,EACTsB,aAAc,GAiEHzC,QC5CA6C,6MA1BbC,MAAQ,CAAEC,kBAAkB,KAE5BC,OAAS,WACP9C,EAAK+C,SAAS,CAAEF,kBAAmB7C,EAAK4C,MAAMC,4FAGvC,IAAAlB,EAAAxB,KACDmB,EAAQnB,KAAKyC,MAAMC,iBACrB,CAAE9B,MAAO,IAAKC,OAAQ,KACtB,CAAEC,QAAS,IAAKsB,aAAc,IAClC,OACEX,EAAAC,EAAAR,cAAA,YACG2B,KAAKC,UAAU3B,GAChBM,EAAAC,EAAAR,cAAC6B,EAAsB5B,EACpB,SAAA6B,GAAA,IAAGnB,EAAHmB,EAAGnB,OAAH,OACCJ,EAAAC,EAAAR,cAAA,UAAQY,IAAKD,EAAQoB,QAASzB,EAAKmB,QAAnC,eAKJlB,EAAAC,EAAAR,cAAA,OAAKgC,GAAG,wBArBEZ,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAR,cAACwC,EAAD,MAAS1C,SAASC,eAAe,SD2H3C,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkBhC,KAAA","file":"static/js/main.97b14473.chunk.js","sourcesContent":["import React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport styles from \"./OverlayWithCutout.module.css\";\n\nclass OverlayWithCutout extends React.Component {\n  static defaultProps = {\n    width: null,\n    height: null,\n    padding: 0,\n    borderRadius: 0\n  };\n\n  constructor(props) {\n    super(props);\n    this.portalRoot = null;\n    this.portal = null;\n    this.targetRef = null;\n  }\n  componentDidMount() {\n    this.portalRoot = document.getElementById(\"portal-root\");\n    this.portal = document.createElement(\"div\");\n    this.portal.style.position = \"relative\";\n    this.portalRoot.appendChild(this.portal);\n    this.forceUpdate();\n  }\n\n  componentWillUnmount() {\n    this.portalRoot.removeChild(this.portal);\n  }\n\n  getCutoutPosition = () => {\n    const targetRect = this.targetRef.getBoundingClientRect();\n    const portalRect = this.portal.getBoundingClientRect();\n    let top = targetRect.top - portalRect.top;\n    let left = targetRect.left - portalRect.left;\n    let width = this.props.width || targetRect.width;\n    let height = this.props.height || targetRect.height;\n    if (this.props.height) {\n      top += (targetRect.height - this.props.height) / 2;\n    }\n    if (this.props.width) {\n      left += (targetRect.width - this.props.width) / 2;\n    }\n    if (this.props.padding) {\n      top -= this.props.padding;\n      left -= this.props.padding;\n      width += 2 * this.props.padding;\n      height += 2 * this.props.padding;\n    }\n    return { top, left, width, height };\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.children({ setRef: ref => (this.targetRef = ref) })}\n        {this.portal &&\n          this.targetRef &&\n          createPortal(\n            <div\n              className={styles.base}\n              style={{\n                position: \"absolute\",\n                ...this.getCutoutPosition(),\n                borderRadius: this.props.borderRadius\n              }}\n            />,\n            this.portal\n          )}\n      </>\n    );\n  }\n}\n\nexport default OverlayWithCutout;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport OverlayWithCutout from \"./components/OverlayWithCutout\";\n\nclass App extends Component {\n  state = { byWidthAndHeight: true };\n\n  toggle = () => {\n    this.setState({ byWidthAndHeight: !this.state.byWidthAndHeight });\n  };\n\n  render() {\n    const style = this.state.byWidthAndHeight\n      ? { width: 200, height: 150 }\n      : { padding: 100, borderRadius: 20 };\n    return (\n      <main>\n        {JSON.stringify(style)}\n        <OverlayWithCutout {...style}>\n          {({ setRef }) => (\n            <button ref={setRef} onClick={this.toggle}>\n              Click me!\n            </button>\n          )}\n        </OverlayWithCutout>\n        <div id=\"portal-root\" />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"OverlayWithCutout_base__2lVp5\"};"],"sourceRoot":""}